Inheritance is a fundamental concept in Java that allows one class to inherit properties (fields) and behaviors (methods) from another class.
This promotes code reusability and establishes a relationship between classes.



hare 
1. Inheritance Basics
2. Types of Inheritance
3. Method Overriding
4. Access Control
5. Final Keyword
6. Example:



Basic Concepts

class Animal {
  // methods and fields
}

// use of extends keyword
// to perform inheritance
class Dog extends Animal {

  // methods and fields of Animal
  // methods and fields of Dog
}

1. Inheritance Basics:
Superclass and Subclass: A superclass (or parent class) is the class from which properties and methods are inherited by another class, known as the subclass (or child class).
extends Keyword: Used to define a subclass that inherits from a superclass.



class SubclassName extends SuperclassName {
    // additional fields and methods
}


2. Types of Inheritance:
Single Inheritance: One subclass inherits from one superclass.
Multilevel Inheritance: A chain of inheritance where a subclass is derived from another subclass.
Hierarchical Inheritance: Multiple subclasses inherit from a single superclass.
Note: Java does not support multiple inheritance (a class cannot inherit from more than one class) directly, but it can be achieved through interfaces.


// 1.concept of single inheritance


// Parent class
class One {
    public void print_geek()
    {
        System.out.println("Geeks");
    }
}

class Two extends One {
    public void print_for() { System.out.println("for"); }
}

// Driver class
public class Main {
      // Main function
    public static void main(String[] args)
    {
        Two g = new Two();
        g.print_geek();
        g.print_for();
        g.print_geek();
    }
}



//2. Multilevel Inheritance

// Parent class One
class One {
    // Method to print "Geeks"
    public void print_geek() {
        System.out.println("Geeks");
    }
}

// Child class Two inherits from class One
class Two extends One {
    // Method to print "for"
    public void print_for() {
        System.out.println("for");
    }
}

// Child class Three inherits from class Two
class Three extends Two {
    // Method to print "Geeks"
    public void print_lastgeek() {
        System.out.println("Geeks");
    }
}

// Driver class
public class Main {
    public static void main(String[] args) {
        // Creating an object of class Three
        Three g = new Three();
        
        // Calling method from class One
        g.print_geek();
        
        // Calling method from class Two
        g.print_for();
        
        // Calling method from class Three
        g.print_lastgeek();
    }
}



//3. concept of Hierarchical  inheritance

class A {
    public void print_A() { System.out.println("Class A"); }
}

class B extends A {
    public void print_B() { System.out.println("Class B"); }
}

class C extends A {
    public void print_C() { System.out.println("Class C"); }
}

class D extends A {
    public void print_D() { System.out.println("Class D"); }
}

// Driver Class
public class Test {
    public static void main(String[] args)
    {
        B obj_B = new B();
        obj_B.print_A();
        obj_B.print_B();

        C obj_C = new C();
        obj_C.print_A();
        obj_C.print_C();

        D obj_D = new D();
        obj_D.print_A();
        obj_D.print_D();
    }
}



// 4.concept of Multiple inheritance


interface One {
    public void print_geek();
}

interface Two {
    public void print_for();
}

interface Three extends One, Two {
    public void print_geek();
}
class Child implements Three {
    @Override public void print_geek()
    {
        System.out.println("Geeks");
    }

    public void print_for() { System.out.println("for"); }
}

// Drived class
public class Main {
    public static void main(String[] args)
    {
        Child c = new Child();
        c.print_geek();
        c.print_for();
        c.print_geek();
    }
}


3. Method Overriding:
A subclass can provide a specific implementation of a method already defined in its superclass.
super Keyword: Used to refer to the superclass's method or constructor.




class Animal {
    Animal() {
        System.out.println("Animal constructor");
    }
}

class Dog extends Animal {
    Dog() {
        super(); // Calls the superclass constructor
        System.out.println("Dog constructor");
    }
}


4. Access Control
private: Not accessible in the subclass.
protected: Accessible within the subclass.
public: Accessible everywhere.
default (no modifier): Accessible within the same package.


5. Final Keyword:
A class marked as final cannot be extended.
A method marked as final cannot be overridden.



final class Animal {
    // Class cannot be extended
}

Example of Method Overriding and super Keyword

class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void sound() {
        super.sound(); // Calls the superclass method
        System.out.println("Dog barks");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.sound(); // Calls the overridden method
    }
}
In this example, the Dog class overrides the sound method of the Animal class and uses the super keyword to call the superclass method before adding its own behavior.





