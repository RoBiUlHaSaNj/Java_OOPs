The Java Collections Framework provides a set of interfaces and classes 
for storing and manipulating groups of objects. It includes several key
interfaces and their commonly used implementations. Hereâ€™s an overview:

Core Interfaces

List:

Purpose: Represents an ordered collection (sequence) of elements.
Characteristics: Allows duplicate elements and provides positional access.
Common Implementations:
ArrayList: A resizable array implementation of the List interface. It provides fast 
random access and is good for scenarios where you need to frequently access elements by index.
LinkedList: Implements the List interface using a doubly linked list.
It provides better performance for insertions and deletions compared to ArrayList but slower random access.

List<String> arrayList = new ArrayList<>();
List<String> linkedList = new LinkedList<>();


Set:

Purpose: Represents a collection that does not allow duplicate elements.
Characteristics: No ordering is guaranteed, though some implementations provide order.

Common Implementations:

HashSet: Implements the Set interface using a hash table. It provides
constant time performance for basic operations but does not guarantee order.
TreeSet: Implements the Set interface using a red-black tree. It provides a sorted 
set and guarantees elements are sorted according to their natural ordering or a specified comparator.

Set<String> hashSet = new HashSet<>();
Set<String> treeSet = new TreeSet<>();


Map:

Purpose: Represents a collection of key-value pairs where each key is unique.
Characteristics: Allows efficient retrieval and modification of values based on keys.

Common Implementations:

HashMap: Implements the Map interface using a hash table. It provides constant time performance for basic operations and does not guarantee order.

TreeMap: Implements the Map interface using a red-black tree. It provides a sorted map and guarantees that keys are sorted.

Map<String, Integer> hashMap = new HashMap<>();
Map<String, Integer> treeMap = new TreeMap<>();

Queue:

Purpose: Represents a collection designed for holding elements prior to processing.

Characteristics: Typically used to implement data structures like FIFO (First-In-First-Out) queues.

Common Implementations:

LinkedList: Can be used as a queue and implements the Queue interface. Provides FIFO behavior.

PriorityQueue: Implements a priority queue where elements are ordered based on their natural ordering or a specified comparator.

Queue<String> linkedListQueue = new LinkedList<>();
Queue<String> priorityQueue = new PriorityQueue<>();

Iterators and Enhanced For-Loop

Iterators:

Purpose: Provides a way to iterate over elements in a collection.
Usage: Allows sequential access to elements in a collection.


List<String> list = new ArrayList<>();
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
    String item = iterator.next();
    System.out.println(item);
}
Enhanced For-Loop:

Purpose: Simplifies iteration over collections and arrays.
Usage: Provides a concise way to iterate through each element without using an explicit iterator.

List<String> list = new ArrayList<>();
for (String item : list) {
    System.out.println(item);
}
Generics in Collections
Purpose: Provides type safety by allowing you to specify the type of objects that a collection can hold.

Usage: Helps avoid runtime ClassCastException by catching type-related errors at compile time.


List<String> stringList = new ArrayList<>();
stringList.add("Hello");
stringList.add("World");

// No need for casting
String first = stringList.get(0);
Summary
Interfaces: List, Set, Map, and Queue provide different ways to handle collections of objects.
Implementations: Various classes like ArrayList, LinkedList, HashSet, TreeSet, HashMap, and TreeMap offer specific functionalities and performance characteristics.
Iterators and For-Loops: Allow traversal of collections, with enhanced for-loops providing a more concise syntax.
Generics: Ensure type safety and eliminate the need for explicit casting by specifying the type of elements in collections.
