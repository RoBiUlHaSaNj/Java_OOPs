In Java, a constructor is a special type of method that is automatically invoked when an object of a class is created.
The primary purpose of a constructor is to initialize the newly created object. A constructor has the same name as the class and does not have a return type, not even void.

Key Features of Constructors:

Same Name as the Class:
The constructor must have the same name as the class in which it resides.

No Return Type:
Constructors do not return any value, so they do not have a return type, not even void.

Automatically Invoked:
A constructor is automatically called when a new instance (object) of a class is created using the new keyword.

Initialization of Objects:
The main purpose of a constructor is to initialize the object's fields (attributes) when it is created.

Types of Constructors:
1.Default Constructor: A constructor that takes no arguments. If no constructor is explicitly defined in a class, Java provides a default constructor automatically.
2.Parameterized Constructor: A constructor that takes one or more arguments, allowing for the initialization of the object with specific values.


1. Default Constructor:

If you don't provide any constructor in your class, Java provides a default constructor with no parameters.
This default constructor initializes the object with default values.


class MyClass {
    int number;
    String text;

    // Default constructor (implicitly provided by Java)
    MyClass() {
        number = 0;  // default initialization
        text = "Default";  // default initialization
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj = new MyClass();  // Calls the default constructor
        obj.display();  // Outputs: Number: 0, Text: Default
    }
}

2. Parameterized Constructor:

A constructor with parameters allows you to initialize the object with specific values at the time of creation.


class MyClass {
    int number;
    String text;

    // Parameterized constructor
    MyClass(int num, String str) {
        number = num;
        text = str;
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj1 = new MyClass(42, "Hello");  // Calls the parameterized constructor
        MyClass obj2 = new MyClass(100, "World");

        obj1.display();  // Outputs: Number: 42, Text: Hello
        obj2.display();  // Outputs: Number: 100, Text: World
    }
}

3. Overloading Constructors:

Like methods, constructors can also be overloaded to provide different ways to create objects.


class MyClass {
    int number;
    String text;

    // Default constructor
    MyClass() {
        number = 0;
        text = "Default";
    }

    // Parameterized constructor
    MyClass(int num) {
        number = num;
        text = "Default";
    }

    // Another parameterized constructor
    MyClass(int num, String str) {
        number = num;
        text = str;
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj1 = new MyClass();  // Calls the default constructor
        MyClass obj2 = new MyClass(10);  // Calls the constructor with one parameter
        MyClass obj3 = new MyClass(50, "Java");  // Calls the constructor with two parameters

        obj1.display();  // Outputs: Number: 0, Text: Default
        obj2.display();  // Outputs: Number: 10, Text: Default
        obj3.display();  // Outputs: Number: 50, Text: Java
    }
}
Constructor Chaining:
In Java, constructors can call other constructors of the same class using the this() keyword. 
This is known as constructor chaining and allows for code reuse and more efficient object initialization.


Copy code
class MyClass {
    int number;
    String text;

    // Default constructor
    MyClass() {
        this(0, "Default");  // Calls the parameterized constructor
    }

    // Parameterized constructor
    MyClass(int num) {
        this(num, "Default");  // Calls the parameterized constructor
    }

    // Another parameterized constructor
    MyClass(int num, String str) {
        number = num;
        text = str;
    }

    void display() {
        System.out.println("Number: " + number + ", Text: " + text);
    }
}


public class Main {
    public static void main(String[] args) {
        MyClass obj1 = new MyClass();  // Calls the default constructor
        MyClass obj2 = new MyClass(10);  // Calls the constructor with one parameter
        MyClass obj3 = new MyClass(50, "Java");  // Calls the constructor with two parameters

        obj1.display();  // Outputs: Number: 0, Text: Default
        obj2.display();  // Outputs: Number: 10, Text: Default
        obj3.display();  // Outputs: Number: 50, Text: Java
    }
}
Key Points to Remember:
1.Constructors do not return a value, not even void.
2.If no constructor is explicitly defined, Java provides a default constructor.
3.Constructors can be overloaded to provide different ways to initialize an object.
4.Constructors can call each other using this() (constructor chaining) to avoid code duplication and ensure that all initializations are done in one place.
5.Constructors are crucial in object-oriented programming as they ensure that an object is created in a consistent and valid state.
