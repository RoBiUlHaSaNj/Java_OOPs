1. Object Class and Wrapper Classes in Java
In Java, the Object class is the root of the class hierarchy. Every class in Java directly
or indirectly inherits from the Object class. This means that all Java objects have access 
to the methods defined in the Object class.

Important Methods of the Object Class:

toString():

Converts an object to its string representation.
By default, it returns a string consisting of the class name followed by the "@" symbol and the object's hashcode.
You can override it to provide a more meaningful string representation.

class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }


    public String toString() {
        return "Person [name=" + name + ", age=" + age + "]";
    }
}

public class Main {
    public static void main(String[] args) {
        Person person = new Person("John", 25);
        System.out.println(person.toString());  // Output: Person [name=John, age=25]
    }
}

equals(Object obj):

Determines whether two objects are "equal" based on their content.
The default implementation checks for reference equality (==), but you can override it to check for logical equality.


class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }


    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        Person person = (Person) obj;
        return age == person.age && name.equals(person.name);
    }
}

public class Main {
    public static void main(String[] args) {
        Person person1 = new Person("John", 25);
        Person person2 = new Person("John", 25);
        System.out.println(person1.equals(person2));  // Output: true
    }
}


hashCode():

Returns an integer hash code value for the object.
If you override equals(), you must also override hashCode() to ensure that objects that are considered equal have the same hash code.
Example:



public int hashCode() {
    return Objects.hash(name, age);
}
